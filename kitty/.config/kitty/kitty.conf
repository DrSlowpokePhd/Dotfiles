# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

#: Fonts {{{
font_family      JetBrains Mono Regular Nerd Font Complete
bold_font        JetBrains Mono Bold Nerd Font Complete
italic_font      JetBrains Mono Italic Nerd Font Complete
bold_italic_font JetBrains Mono Bold Italic Nerd Font Complete

font_size 12.0

adjust_line_height  0
adjust_column_width 0
adjust_baseline 0
disable_ligatures never

font_features none
#: }}}

#: Cursor customization {{{
cursor #cccccc

cursor_text_color #111111

cursor_shape beam

cursor_beam_thickness 1.5

cursor_blink_interval -1

cursor_stop_blinking_after 15.0

#: }}}

#: Scrollback {{{
scrollback_lines 10000
#: }}}

#: Mouse {{{

mouse_hide_wait 3.0
url_color #0087bd
url_style curly
open_url_with default
url_prefixes http https file ftp gemini irc gopher mailto news git
detect_urls yes
#: }}}

#: Performance tuning {{{

repaint_delay 6
input_delay 1
# repaint_delay 10
# input_delay 3

sync_to_monitor no
# sync_to_monitor yes

#: }}}

#: Terminal bell {{{

enable_audio_bell no

#: Enable/disable the audio bell. Useful in environments that require
#: silence.

# visual_bell_duration 0.0

#: Visual bell duration. Flash the screen when a bell occurs for the
#: specified number of seconds. Set to zero to disable.

# window_alert_on_bell yes

#: Request window attention on bell. Makes the dock icon bounce on
#: macOS or the taskbar flash on linux.

# bell_on_tab yes

#: Show a bell symbol on the tab if a bell occurs in one of the
#: windows in the tab and the window is not the currently focused
#: window

# command_on_bell none

#: Program to run when a bell occurs.

#: }}}

#: Window layout {{{

remember_window_size  no
initial_window_width 1280
initial_window_height 720

#: If enabled, the window size will be remembered so that new
#: instances of kitty will have the same size as the previous
#: instance. If disabled, the window will initially have size
#: configured by initial_window_width/height, in pixels. You can use a
#: suffix of "c" on the width/height values to have them interpreted
#: as number of cells instead of pixels.

enabled_layouts splits:split_axis=horizontal

window_resize_step_cells 2
window_resize_step_lines 2

window_border_width 0.5pt

draw_minimal_borders yes

window_margin_width 0

single_window_margin_width -1

window_padding_width 5

placement_strategy center

active_border_color #00ff00
inactive_border_color #cccccc
bell_border_color #ff5a00
inactive_text_alpha 1.0

hide_window_decorations no

resize_debounce_time 0.1
resize_draw_strategy static
resize_in_steps no
confirm_os_window_close 0
#: }}}

#: Tab bar {{{

tab_bar_edge bottom
tab_bar_margin_width 0.0
tab_bar_margin_height 0.0 0.0
tab_bar_style fade
tab_bar_min_tabs 2
tab_switch_strategy previous
tab_fade 0.25 0.5 0.75 1
tab_separator " â”‡"
tab_powerline_style angled
tab_activity_symbol none
tab_title_template "{title}"
active_tab_title_template none
tab_bar_background none

#: }}}

#: {{{ Color
background  #282828
foreground  #ebdbb2

cursor                #928374

selection_foreground  #928374
selection_background  #3c3836

color0  #282828
color8  #928374

# red
color1                #cc241d
# light red
color9                #fb4934

# green
color2                #98971a
# light green
color10               #b8bb26

# yellow
color3                #d79921
# light yellow
color11               #fabd2d

# blue
color4                #458588
# light blue
color12               #83a598

# magenta
color5                #b16286
# light magenta
color13               #d3869b

# cyan
color6                #689d6a
# lighy cyan
color14               #8ec07c

# light gray
color7                #a89984
# dark gray
color15               #928374
#: }}}

#: Advanced {{{

shell zsh
editor nvim
close_on_child_death no
allow_remote_control yes
listen_on none

startup_session none

clipboard_control write-clipboard write-primary
allow_hyperlinks yes
# term xterm-kitty
#: }}}

#: OS specific tweaks {{{
linux_display_server x11
#: }}}

#: {{{ Keyboard shortcuts



#: Clipboard {{{

# map kitty_mod+c copy_to_clipboard

#: There is also a copy_or_interrupt action that can be optionally
#: mapped to Ctrl+c. It will copy only if there is a selection and
#: send an interrupt otherwise. Similarly, copy_and_clear_or_interrupt
#: will copy and clear the selection or send an interrupt if there is
#: no selection.

# map kitty_mod+v paste_from_clipboard
# map kitty_mod+s paste_from_selection
# map kitty_mod+o pass_selection_to_program

#: You can also pass the contents of the current selection to any
#: program using pass_selection_to_program. By default, the system's
#: open program is used, but you can specify your own, the selection
#: will be passed as a command line argument to the program, for
#: example::

#:     map kitty_mod+o pass_selection_to_program firefox

#: You can pass the current selection to a terminal program running in
#: a new kitty window, by using the @selection placeholder::

#:     map kitty_mod+y new_window less @selection

#: }}}

#: Scrolling {{{

map kitty_mod+up        scroll_line_up
map kitty_mod+down      scroll_line_down
map kitty_mod+page_up   scroll_page_up
map kitty_mod+page_down scroll_page_down
map kitty_mod+home      scroll_home
map kitty_mod+end       scroll_end
map kitty_mod+h         show_scrollback

#: }}}

#: Window management {{{

map kitty_mod+enter new_window

map kitty_mod+n new_os_window

map kitty_mod+w close_window
map kitty_mod+] next_window
map kitty_mod+[ previous_window
map kitty_mod+f move_window_forward
map kitty_mod+b move_window_backward
map kitty_mod+` move_window_to_top
map kitty_mod+r start_resizing_window
map kitty_mod+1 first_window
map kitty_mod+2 second_window
map kitty_mod+3 third_window
map kitty_mod+4 fourth_window
map kitty_mod+5 fifth_window
map kitty_mod+6 sixth_window
map kitty_mod+7 seventh_window
map kitty_mod+8 eighth_window
map kitty_mod+9 ninth_window
map kitty_mod+0 tenth_window
#: }}}

#: Tab management {{{

map kitty_mod+right next_tab
map kitty_mod+left  previous_tab
map kitty_mod+t     new_tab
map kitty_mod+q     close_tab
map shift+cmd+w     close_os_window
map kitty_mod+.     move_tab_forward
map kitty_mod+,     move_tab_backward
map kitty_mod+alt+t set_tab_title

#: }}}

#: Layout management {{{

map kitty_mod+l next_layout

#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:    map ctrl+alt+p last_used_layout
#: }}}

#: Font sizes {{{

#: You can change the font size for all top-level kitty OS windows at
#: a time or only the current one.

map kitty_mod+equal     change_font_size all +2.0
map kitty_mod+minus     change_font_size all -2.0
map kitty_mod+backspace change_font_size all 0

#: To setup shortcuts for specific font sizes::

#:     map kitty_mod+f6 change_font_size all 10.0

#: To setup shortcuts to change only the current OS window's font
#: size::

#:     map kitty_mod+f6 change_font_size current 10.0
#: }}}

#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

map kitty_mod+e kitten hints

#: Open a currently visible URL using the keyboard. The program used
#: to open the URL is specified in open_url_with.

map kitty_mod+p>f kitten hints --type path --program -

#: Select a path/filename and insert it into the terminal. Useful, for
#: instance to run git commands on a filename output from a previous
#: git command.

map kitty_mod+p>shift+f kitten hints --type path

#: Select a path/filename and open it with the default open program.

map kitty_mod+p>l kitten hints --type line --program -

#: Select a line of text and insert it into the terminal. Use for the
#: output of things like: ls -1

map kitty_mod+p>w kitten hints --type word --program -

#: Select words and insert into terminal.

map kitty_mod+p>h kitten hints --type hash --program -

#: Select something that looks like a hash and insert it into the
#: terminal. Useful with git, which uses sha1 hashes to identify
#: commits

map kitty_mod+p>n kitten hints --type linenum

#: Select something that looks like filename:linenum and open it in
#: vim at the specified line number.

# map kitty_mod+p>y kitten hints --type hyperlink

#: Select a hyperlink (i.e. a URL that has been marked as such by the
#: terminal program, for example, by ls --hyperlink=auto).


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see kittens/hints.
#: }}}

#: Miscellaneous {{{

# map kitty_mod+f11    toggle_fullscreen
# map kitty_mod+f10    toggle_maximized
# map kitty_mod+u      kitten unicode_input
# map kitty_mod+f2     edit_config_file
# map kitty_mod+escape kitty_shell window

#: Open the kitty shell in a new window/tab/overlay/os_window to
#: control kitty using commands.

# map kitty_mod+a>m    set_background_opacity +0.1
# map kitty_mod+a>l    set_background_opacity -0.1
# map kitty_mod+a>1    set_background_opacity 1
# map kitty_mod+a>d    set_background_opacity default
# map kitty_mod+delete clear_terminal reset active

#: You can create shortcuts to clear/reset the terminal. For example::

#:     # Reset the terminal
#:     map kitty_mod+f9 clear_terminal reset active
#:     # Clear the terminal screen by erasing all contents
#:     map kitty_mod+f10 clear_terminal clear active
#:     # Clear the terminal scrollback by erasing it
#:     map kitty_mod+f11 clear_terminal scrollback active
#:     # Scroll the contents of the screen into the scrollback
#:     map kitty_mod+f12 clear_terminal scroll active

#: If you want to operate on all windows instead of just the current
#: one, use all instead of active.

#: It is also possible to remap Ctrl+L to both scroll the current
#: screen contents into the scrollback buffer and clear the screen,
#: instead of just clearing the screen, for example, for ZSH add the
#: following to ~/.zshrc:

#: .. code-block:: sh

#:     scroll-and-clear-screen() {
#:         printf '\n%.0s' {1..$LINES}
#:         zle clear-screen
#:     }
#:     zle -N scroll-and-clear-screen
#:     bindkey '^l' scroll-and-clear-screen

# map kitty_mod+f5 load_config_file

#: Reload kitty.conf, applying any changes since the last time it was
#: loaded. Note that a handful of settings cannot be dynamically
#: changed and require a full restart of kitty.  You can also map a
#: keybinding to load a different config file, for example::

#:     map f5 load_config /path/to/alternative/kitty.conf

#: Note that all setting from the original kitty.conf are discarded,
#: in other words the new conf settings *replace* the old ones.

# map kitty_mod+f6 debug_config

#: Show details about exactly what configuration kitty is running with
#: and its host environment. Useful for debugging issues.


#: You can tell kitty to send arbitrary (UTF-8) encoded text to the
#: client program when pressing specified shortcut keys. For example::

#:     map ctrl+alt+a send_text all Special text

#: This will send "Special text" when you press the ctrl+alt+a key
#: combination.  The text to be sent is a python string literal so you
#: can use escapes like \x1b to send control codes or \u21fb to send
#: unicode characters (or you can just input the unicode characters
#: directly as UTF-8 text). The first argument to send_text is the
#: keyboard modes in which to activate the shortcut. The possible
#: values are normal or application or kitty or a comma separated
#: combination of them.  The special keyword all means all modes. The
#: modes normal and application refer to the DECCKM cursor key mode
#: for terminals, and kitty refers to the special kitty extended
#: keyboard protocol.

#: Another example, that outputs a word and then moves the cursor to
#: the start of the line (same as pressing the Home key)::

#:     map ctrl+alt+a send_text normal Word\x1b[H
#:     map ctrl+alt+a send_text application Word\x1bOH

#: }}}

#: }}}
